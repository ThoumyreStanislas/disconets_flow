process {
    publishDir = {"./results_disconets_flow/$sid/$task.process"}
    scratch = true
    errorStrategy = { task.attempt <= 1 ? 'retry' : 'ignore' }
    maxRetries = 3
    maxErrors = -1
    stageInMode = 'copy'
    stageOutMode = 'rsync'
    tag = { "$sid" }
    afterScript = 'sleep 1'
}

params {
  root = false
  tractograms = false
  atlases = false
  help = false

  lesion_name="cavity"

  //**Registration**//
    run_bet=false
    registration_script="antsRegistrationSyN.sh"
    registration_strategy="s"
    quick_registration=false
    linear_registration = false

  //**Template T1 path**//
    template_t1="/human-data/mni_152_sym_09c/t1"

    nbr_subjects_for_avg_connections=50

  //**Decompose options**//
      no_pruning=false
      no_remove_loops=false
      no_remove_outliers=false
      min_length=20
      max_length=200
      loop_max_angle=330
      outlier_threshold=0.5

  //**Output directory**//
      output_dir="./results_disconets_flow"

  //**Number of processes per tasks**//
      processes_connectivity=4
      processes_bet_register_t1=4

  //**Process control**//
      processes = false

  Readme_Publish_Dir = "./results_disconets_flow/Readme"
}

if(params.linear_registration)
{
  params.registration_strategy="a"
}

if(params.quick_registration)
{
  params.registration_script="antsRegistrationSyNQuick.sh"
}

if(params.processes) {
    if(params.processes > Runtime.runtime.availableProcessors()) {
        throw new RuntimeException("Number of processes higher than available CPUs.")
    }
    else if(params.processes < 1) {
        throw new RuntimeException("When set, number of processes must be >= 1 " +
                                   "and smaller or equal to the number of CPUs.")
    }
    else {
        executor.$local.cpus = params.processes
    }
}

singularity {
    autoMounts = true
}

profiles {
    fully_reproducible {
        params.processes_bet_register_t1=1
    }

    macos {
            process.scratch="/tmp"
    }
}
